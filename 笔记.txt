1、初始化项目目录
```
mkdir koa2-demo
cd koa2-demo
npm init -y
```
2、建立src目录及 src/app.js文件
3、安装包
```
cnpm i -S koa koa-router koa-views ejs koa-static koa-bodyparser
```
4、安装其它包
```
cnpm i -D nodemon      --开发环境时不用每次重启服务器
cnpm i -S koa-json        --解析成json
cnpm i -S kcors             --提供api服务时允许跨域
```
5、package.json中增加 nodemon的script启动脚本
```
--监视src目录的更改
"scripts": {
    "dev": "nodemon -w src src/app.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  }
```



1、ejs使用  https://ejs.bootcss.com/
<% '脚本' 标签，用于流程控制，无输出。
<%_ 删除其前面的空格符
<%= 输出数据到模板（输出是转义 HTML 标签）
<%- 输出非转义的数据到模板
<%# 注释标签，不执行、不输出内容
<%% 输出字符串 '<%'
%> 一般结束标签
-%> 删除紧随其后的换行符
_%> 将结束标签后面的空格符删除


2、koa 手动设置允许跨域
app.use(async(ctx,next)=>{
  ctx.set({
    'Access-Control-Allow-Origin':ctx.headers.origin || '*',
    'Access-Control-Allow-Methods':'POST,DELETE,PUT,GET'
  })
  await next();
})

3、mongodb记录
安装时不要安装图形界面，不然会卡住（因为访问不到国外）
mongodb安装目录的根目录下新建 data/db文件夹
添加环境变量：例如：D:\Program Files\MongoDB\Server\4.0\bin
打开命令窗口：mongod
打开另外一个命令窗口：mongo 进入
show dbs     显示所有的数据库
db           显示当前所在的数据库
use test     进入test数据库(如果没有则会自动创建)
show collections: 显示数据库中的集合
db.集合.insert( ):新建数据集合和插入文件（数据），当集合没有时，这时候就可以新建一个集合，并向里边插入数据。Demo：db.user.insert({“name”:”jspang”})
db.集合.find( ):查询所有数据，这条命令会列出集合下的所有数据，可以看到MongoDB是自动给我们加入了索引值的。Demo：db.user.find()
db.集合.findOne( ):查询第一个文件数据，这里需要注意的，所有MongoDB的组合单词都使用首字母小写的驼峰式写法。
db.集合.update({查询},{修改}):修改文件数据，第一个是查询条件，第二个是要修改成的值。
db.集合.remove(条件)：删除文件数据，注意的是要跟一个条件。Demo:db.user.remove({“name”:”jspang”})
db.集合.drop( ):删除整个集合，这个在实际工作中一定要谨慎使用，如果是程序，一定要二次确认。
db.dropDatabase( ):删除整个数据库，在删除库时，一定要先进入数据库，然后再删除。

koa中使用mongodb
cnpm i -S mongoose
如果mongodb是在远程机子上：
//绑定一个ip是为了让其它地方可访问，不然只能当前机子访问。
mongod --bind_ip 192.168.0.237 --port 27017
https://blog.csdn.net/baidu_19473529/article/details/79434581
以服务的方式开启：http://www.runoob.com/mongodb/mongodb-window-install.html    --好像从4.0开始,自动安装了服务，只是没有启动，net start MongoDB就可以了
//注意进入到mongodb安装目录bin下执行会比较好，即使配置了环境变量，在别的盘执行mongod还是出错
mongod.exe --config "D:\Program Files\MongoDB\Server\4.0\bin\mongod.cfg" --serviceName MongoDB --install
net start MongoDB
net stop MongoDB
sc delete MongoDB

mongo --host 192.168.0.237

mongoose文档：https://mongoosejs.com/docs/index.html

4、koa-passport身份验证
参考：https://github.com/mjhea0/koa-passport-example          --官方示例
https://segmentfault.com/a/1190000011557953
https://www.cnblogs.com/beileixinqing/p/9273243.html
https://www.jianshu.com/p/7010bea0c656
cnpm i -S koa-passport koa-session passport-local

auth文件夹下建一个passport的策略文件 passport.js
```
//定义策略
const passport = require('koa-passport')
var LocalStrategy = require('passport-local').Strategy


// 序列化ctx.login()触发
passport.serializeUser(function(user, done) {
  console.log('serializeUser: ', user)
  done(null, user.id)
})
// 反序列化（请求时，session中存在"passport":{"user":"1"}触发）
passport.deserializeUser(async function(id, done) {
  console.log('deserializeUser: ', id)
  var user = {id: 1, username: 'admin', password: '123456'}
  done(null, user)
})
// 提交数据(策略)
passport.use(new LocalStrategy({
  usernameField: 'username',
  passwordField: 'userpwd'
}, function(username, password, done) {
  console.log('LocalStrategy', username, password)
  var user = {id: 1, username: username, password: password}
  done(null, user, {msg: 'this is a test'})
  // done(err, user, info)
}))


module.exports = passport
```
app.js添加身份验证相关的代码
```
const session=require('koa-session')
const passport=require('koa-passport')


//auth相关
//sessions
app.keys=['jiang-koa-sessionkey']
app.use(session(app))
//authentication
require('./auth/passport')
app.use(passport.initialize())
app.use(passport.session())
```

将需要登录才可访问的功能写成中间件拦截
```
//有些页面需要登录了才能访问，统一用中间件来控制

const needAuthPage=[/^\/admin/i,/^\/todo/i]  //需要登录才可以访问的url地址,这里使用了简单的正则数组

module.exports=async (ctx,next)=>{
    var url=ctx.request.url;
    if(needAuthPage.length){
        var flag=false;
        for(var reg of needAuthPage){
            if(reg.test(url)){
                flag=true;  //如果匹配到是要登录才能访问的页面
                break;
            }
        }
        if(flag){
            if(ctx.isAuthenticated()){  //如果已经登录
                await next()
            }else{  //如果没有登录，跳转到登录页面
                console.log('用户没有登录正在访问：'+url);
                ctx.redirect('/login');
            }
        }else{  //无需登录就可访问的页面，直接 await next()
            await next();
        }
    }
}
```

登录用户的数据获取：
```
indexPage: async (ctx, next) => {

        console.log('当前登录用户：',ctx.req.user)
        //后台管理布局页面
        var vm = {
            title: '后台管理'
        }
        await ctx.render('admin', vm)
    }
```
